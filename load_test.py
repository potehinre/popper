#!/usr/bin/python
from websocket import create_connection
from collections import OrderedDict
from optparse import OptionParser
import json,ujson
import time
import gevent
import socket
from gevent import monkey
monkey.patch_all()


parser=OptionParser()
parser.add_option("-c","--chan_count",dest="channel_count",help="channel count to be created",type="int")
parser.add_option("-u","--user_per_channel",dest="user_count",help="user subscribed per channel",type="int")
parser.add_option("-m","--messages",dest="messages_per_second",help="messages per second generated by user",type="float")
parser.add_option("-t","--time",dest="time_for_testing",help="time for load testing in seconds",type="int")
(options,args)=parser.parse_args()

config={"host":"localhost",
        "port":"1234",
        "path":"/app/popper/"}

statistics={"refused_connections":0,
             "established_connections":0,
             "msg_sent":0}

class ConnectionNotEstablishedError(Exception):
    def __init__(self, value):
        self.value = value
    def __str__(self):
        return repr(self.value)
        
# Json Templates Function
def unsubscribe_json_template():
    result=OrderedDict()
    result['event']='pusher:unsubscribe'
    result['data']=OrderedDict([("channel","%s")])
    return json.dumps(result)
    
def subscribe_json_template():
    chan_data=OrderedDict()
    chan_data['user_id']="%s"
    chan_data['user_info']=OrderedDict([("name","load_tester")])
        
    data=OrderedDict()
    data['channel']="%s"
    data['auth']="app:lalala"
    data['channel_data'] = chan_data
        
    result=OrderedDict()
    result['event']="pusher:subscribe"
    result['data']=data
        
    return json.dumps(result)
    
def msg_json_template():
    result=OrderedDict()
    result['event']="chat_msg"
    result['data']=OrderedDict([("message","%s")])
    result['channel']="%s"
    return json.dumps(result)

#templates
msg_template=msg_json_template()
subscribe_template=subscribe_json_template()
unsubscribe_template=unsubscribe_json_template()

def render_message(channel_name,msg):
    return msg_template%(msg,channel_name)
    
def render_subscribe(channel_name,user_id):
    return subscribe_template%(channel_name,user_id)
    
def render_unsubscribe(channel_name):
    return unsubscribe_template%(channel_name)

class PusherClient(object):
    def __init__(self,host,port,path):
        self.connection=create_connection("ws://"+host+":"+str(port)+path)
        response = self.connection.recv()
        if not self.is_connection_established(response):
            raise ConnectionNotEstablishedError(response)
            
    def subscribe(self,channel_name,user_id):
        subscribe_json = render_subscribe(channel_name,user_id)
        self.connection.send(subscribe_json)
        
    def unsubscribe(self,channel_name):
        unsubscribe_json = render_unsubscribe(channel_name)
        self.connection.send(unsubscribe_json)
        
    def send_msg(self,channel_name,msg):
        msg_json = render_message(channel_name,msg)
        self.connection.send(msg_json)
        
    def is_connection_established(self,response):
        result = json.loads(response)
        return result.has_key("event") and result["event"] == "pusher:connection_established"
        
        
class Worker(object):
    def __init__(self,channel_name,msg_per_second,user_id,statistics):
        global config
        self.statistics=statistics
        try:
            self.channel_name = channel_name
            self.mps = msg_per_second
            self.id = user_id
            self.client = PusherClient(config['host'],config['port'],config['path'])
            self.client.subscribe(channel_name,user_id)
            self.statistics['established_connections']+=1
        except socket.error,e:
            print 'conref'
            self.statistics['refused_connections']+=1
            
    def run(self):
            while True:
                self.client.send_msg(self.channel_name,"test_msg")
                self.statistics['msg_sent']+=1
                time.sleep(1.0/float(self.mps))
        
        
def generate_channel(count):
    for i in xrange(count):
        yield "presence-num-"+str(i)
    
def generate_user(count,channel_name):
    for i in xrange(count):
        yield "user:"+str(channel_name)+str(i)
        
def print_statistics():
    print 'Statistics:'
    print 'Msg to be sent:',options.messages_per_second*options.time_for_testing*options.user_count*options.channel_count
    print 'Msg Sent:',statistics['msg_sent']
    print 'Established connections:',statistics['established_connections']
    print 'Refused connections:',statistics['refused_connections']
    
            
if __name__ == '__main__':
    workers=[]
    before = time.time()
    for channel in generate_channel(options.channel_count):
        for user in generate_user(options.user_count,channel):
            workers.append(Worker(channel,options.messages_per_second,user,statistics))
    diff = time.time() - before
    print 'Connecting taken:',diff
    print_statistics()
    
#    time.sleep(10)
#    for worker in workers:
#        gevent.spawn(worker.run)
#    time.sleep(float(options.time_for_testing))
#    print_statistics()
    